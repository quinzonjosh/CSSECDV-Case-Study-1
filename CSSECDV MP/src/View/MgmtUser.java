/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.PasswordHasher;
import Controller.PasswordValidator;
import Controller.SQLite;
import Controller.SessionManager;
import CustomExceptions.PasswordException;
import Model.Session;
import Model.User;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtUser extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private final PasswordValidator validator = new PasswordValidator();
    private final PasswordHasher hasher = new PasswordHasher();
    private String session = "";
    
    public MgmtUser(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel) table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));
        
//        UNCOMMENT TO DISABLE BUTTONS
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
//        lockBtn.setVisible(false);
//        chgpassBtn.setVisible(false);
    }
    
    public void init(String session){
        this.session = session;
        
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<User> users = sqlite.getUsers();
//        System.out.println("Table Columns: " + tableModel.getColumnCount());
        
        for(int nCtr = 0; nCtr < users.size(); nCtr++){
//            System.out.println("Table attempts: " + users.get(nCtr).getFailed_attempts());
            
            tableModel.addRow(new Object[]{
                users.get(nCtr).getUsername(), 
                users.get(nCtr).getPassword(), 
                users.get(nCtr).getRole(), 
                users.get(nCtr).getFailed_attempts(),
                users.get(nCtr).getLocked()});
            
            
        }
    }

    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        editRoleBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        lockBtn = new javax.swing.JButton();
        chgpassBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Username", "Password", "Role", "Failed_Attempts", "Locked"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(160);
            table.getColumnModel().getColumn(1).setPreferredWidth(400);
            table.getColumnModel().getColumn(2).setPreferredWidth(100);
            table.getColumnModel().getColumn(3).setPreferredWidth(200);
            table.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        editRoleBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editRoleBtn.setText("EDIT ROLE");
        editRoleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        lockBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lockBtn.setText("LOCK/UNLOCK");
        lockBtn.setToolTipText("");
        lockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockBtnActionPerformed(evt);
            }
        });

        chgpassBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chgpassBtn.setText("CHANGE PASS");
        chgpassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chgpassBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editRoleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(lockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editRoleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean verifyUser(){
        try{
            Session current = SessionManager.checkSession(this.sqlite, this.session);
            JPasswordField password = new JPasswordField();
            designer(password, "PASSWORD");
            
            Object[] message = {
                "Enter Your Own Password:", password
            };

            int result = JOptionPane.showConfirmDialog(null, message, "ENTER PASSWORD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
            if(result == JOptionPane.OK_OPTION){
                String username = current.getUsername();
                String passText = new String(password.getPassword());
                try {
                    String hashedPassword = hasher.hash(hasher.hash(passText, "SHA-1"), "SHA-256");
                    if(this.sqlite.isLoginSuccessful(username, hashedPassword)){
                        this.logAction("VERIFY_PASSWORD", "SESSIONID: " + this.session, String.format("[SUCCESS] Password Verficiation of User %s OK", username));
                        return true;
                    }
                    else throw new Exception("Wrong Password!");
                } catch (Exception ex){
                    this.logAction("VERIFY_PASSWORD", "SESSIONID: " + this.session, String.format("[FAIL] Password Verficiation of User %s failed due to %s", username, ex.getMessage()));
                    JOptionPane.showMessageDialog(this, String.format("Wrong Password!"), "Verification Failed", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                    return false;
                }
            }
            
        } catch(Exception e){
            e.printStackTrace();
            this.logAction("VERIFY_PASSWORD", "SESSIONID: " + this.session, String.format("[FAIL] Server Failure due to %s", e));
        }
        
        return false;
    }
    
    private void editRoleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoleBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            String[] options = {"1-DISABLED","2-CLIENT","3-STAFF","4-MANAGER","5-ADMIN"};
            JComboBox optionList = new JComboBox(options);
            
            optionList.setSelectedIndex((int)tableModel.getValueAt(table.getSelectedRow(), 2) - 1);
            
            String result = (String) JOptionPane.showInputDialog(null, "USER: " + tableModel.getValueAt(table.getSelectedRow(), 0), 
                "EDIT USER ROLE", JOptionPane.QUESTION_MESSAGE, null, options, options[(int)tableModel.getValueAt(table.getSelectedRow(), 2) - 1]);
            
            if(result != null){
                
                if(this.verifyUser()){
                    String username = tableModel.getValueAt(table.getSelectedRow(), 0) + "";
    //                System.out.println(tableModel.getValueAt(table.getSelectedRow(), 0));

                    char role = result.charAt(0);
    //                System.out.println(result.charAt(0));

                    try {
                        this.sqlite.changeUserRole(username, role);
                        JOptionPane.showMessageDialog(this, String.format("User %s changed to role = %s", username, result), "Edit Role Successful", JOptionPane.INFORMATION_MESSAGE);
                        this.logAction("CHANGE_ROLE", username, String.format("[SUCCESS] Role of User %s changed to role = %c", username, role));
                        this.init(this.session);  
                    }
                    catch(Exception e){
                        System.out.println(e);
                        JOptionPane.showMessageDialog(this, String.format("User %s attempt to change role to %s has failed.", username, result), "Edit Role Failed", JOptionPane.ERROR_MESSAGE);
                        this.logAction("CHANGE_ROLE", username, String.format("[FAIL] Failure on changing user role (selected = %c)", role));        
                    }
                }
            }
        }
    }//GEN-LAST:event_editRoleBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + tableModel.getValueAt(table.getSelectedRow(), 0) + "?", "DELETE USER", JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                
                if(this.verifyUser()){
                    String username = tableModel.getValueAt(table.getSelectedRow(), 0) + "";
                    System.out.println(tableModel.getValueAt(table.getSelectedRow(), 0));

                     try {

                         this.sqlite.removeUser(username);
                         JOptionPane.showMessageDialog(this, String.format("Attempt to delete user %s is successful.", username), "Delete User Successful", JOptionPane.PLAIN_MESSAGE);
                         this.logAction("REMOVE_USER", username, String.format("[SUCCESS] Successful on deleting user %s ", username));  
                         this.init(this.session);

                     } catch(Exception e){
                         System.out.println(e);
                         JOptionPane.showMessageDialog(this, String.format("Attempt to delete user %s has failed.", username), "Delete User Failed", JOptionPane.ERROR_MESSAGE);
                         this.logAction("REMOVE_USER", username, String.format("[FAIL] Failure on deleting user %s ", username));        
                     }
                }
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void lockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockBtnActionPerformed
        
        if(table.getSelectedRow() >= 0){
            String state = "lock";
            System.out.println(tableModel.getColumnName(3) + ": " + 
                   tableModel.getValueAt(table.getSelectedRow(), 3) + "");
            
            String locked = tableModel.getValueAt(table.getSelectedRow(), 4) + "";
            if(!locked.equals("0")){
                state = "unlock";
            }
           
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to " + state + " " + tableModel.getValueAt(table.getSelectedRow(), 0) + "?", "DELETE USER", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                
                if(this.verifyUser()){
                    
                    String username = tableModel.getValueAt(table.getSelectedRow(), 0) + "";
                    System.out.println(username);

                    if(state.equals("lock")){
                        try {
                            this.sqlite.lockUser(username);
                            JOptionPane.showMessageDialog(this, String.format("User %s has been locked.", username), "Locking Successful", JOptionPane.INFORMATION_MESSAGE);
                            this.logAction("CHANGE_TO_LOCK", username, String.format("[SUCCESS] Locking user %s successful", username));
                            this.init(this.session);

                        } catch (Exception e){
                            System.out.println(e);
                            JOptionPane.showMessageDialog(this, String.format("Attempt to lock user %s has failed.", username), "Locking Failed", JOptionPane.ERROR_MESSAGE);
                            this.logAction("CHANGE_TO_LOCK", username, String.format("[FAIL] Locking user %s failed.", username)); 
                        }
                    }
                    else {
                        try {
                            this.sqlite.unlockUser(username);
                            JOptionPane.showMessageDialog(this, String.format("User %s has been unlocked.", username), "Unlocking Successful", JOptionPane.INFORMATION_MESSAGE);
                            this.logAction("CHANGE_TO_UNLOCK", username, String.format("[SUCCESS] Unlocking user %s successful", username));
                            this.init(this.session);

                        } catch (Exception e){
                            System.out.println(e);
                            JOptionPane.showMessageDialog(this, String.format("Attempt to unlock user %s has failed.", username), "Unlocking Failed", JOptionPane.ERROR_MESSAGE);
                            this.logAction("CHANGE_TO_UNLOCK", username, String.format("[FAIL] Unlocking user %s failed.", username)); 
                        }
                    }
                }
            }
        }
        
        
    }//GEN-LAST:event_lockBtnActionPerformed

    private void chgpassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chgpassBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            JPasswordField password = new JPasswordField();
            JPasswordField confpass = new JPasswordField();
            designer(password, "PASSWORD");
            designer(confpass, "CONFIRM PASSWORD");
            
            Object[] message = {
                "Enter New Password:", password, confpass
            };

            int result = JOptionPane.showConfirmDialog(null, message, "CHANGE PASSWORD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
            
            if (result == JOptionPane.OK_OPTION) {
                
                String username = tableModel.getValueAt(table.getSelectedRow(), 0) + "";
                String passText = new String(password.getPassword());
                String confText = new String(confpass.getPassword());

                System.out.println(confpass.getPassword());
                System.out.println(password.getPassword());

                if(!hasEmptyFields(passText, confText)){
                    password.setText("");
                    confpass.setText("");

                    try {
                        if(validator.isValidPassword(passText, confText)){
                            if(this.verifyUser()){
                                String hashedPassword = validator.passwordPwndCheck(passText);
                                String finalHashedPassword = hasher.hash(hashedPassword, "SHA-256");

                                this.sqlite.changeUserPassword(username, finalHashedPassword);
                                JOptionPane.showMessageDialog(this, String.format("User %s's password has been changed.", username), "Change Password Successful", JOptionPane.PLAIN_MESSAGE);
                                this.logAction("CHANGE_PASS", username, String.format("[SUCCESS] Change password of user %s successful.", username));
                                this.init(this.session);
                            }
                        }
                    } catch (PasswordException e){
                        e.setHeader("Change Password Failed");
                        JOptionPane.showMessageDialog(this, e.getMessage(), e.getHeader(), JOptionPane.ERROR_MESSAGE);  
                        this.logAction("CHANGE_PASS", username, String.format("[FAIL] Input failure on user %s: %s", username, e.getMessage()));

                    } catch(Exception e){
                        System.out.println(e);
                        JOptionPane.showMessageDialog(this, String.format("Attempt to change password of user %s has failed.", username), "Change Password Failed", JOptionPane.ERROR_MESSAGE);
                        this.logAction("CHANGE_PASS", username, String.format("[FAIL] Change password of user %s failed.", username)); 

                    }
                }
                
                
            }
        }
    }//GEN-LAST:event_chgpassBtnActionPerformed

    private boolean hasEmptyFields(String password, String confirmPassword){
        if(password.isEmpty() || confirmPassword.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please complete the change password form.", "Change Password Failed", JOptionPane.ERROR_MESSAGE);
            return true;
        } 
        return false;
    }
    
    
    private void logAction(String event, String username, String desc){
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        sdf.setTimeZone(TimeZone.getDefault()); 
        String date = sdf.format(new Date());
        
        this.sqlite.addLogs(event, username, desc, date);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chgpassBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editRoleBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lockBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
